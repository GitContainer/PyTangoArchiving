#    "$Name:  $";
#    "$Header:  $";
#=============================================================================
#
# file :        PyExtractor.py
#
# description : Python source for the PyExtractor and its commands. 
#                The class is derived from Device. It represents the
#                CORBA servant object which will be accessed from the
#                network. All commands which can be executed on the
#                PyExtractor are implemented in this file.
#
# project :     TANGO Device Server
#
# $Author:  $
#
# $Revision:  $
#
# $Log:  $
#
# copyleft :    European Synchrotron Radiation Facility
#               BP 220, Grenoble 38043
#               FRANCE
#
#=============================================================================
#          This file is generated by POGO
#    (Program Obviously used to Generate tango Object)
#
#         (c) - Software Engineering Group - ESRF
#=============================================================================
#


import PyTango
import sys,time
import fandango
import fandango.functional as fun
import PyTangoArchiving
import traceback


class PyExtractor(PyTango.Device_4Impl):

#--------- Add you global variables here --------------------------
    
    def tag2attr(self,argin):
        if any(argin.endswith(s) for s in ('_r','_t','_w')): argin = argin[:-2]
        if '/' not in argin: argin = argin.replace('__','/')
        return argin
    
    def attr2tag(self,argin):
        if '/' in argin: argin = argin.replace('/','__')
        return argin

    def read_dyn_attr(self,attr):
        #attr.set_value(1.0)
        aname,values = attr.get_name(),[]
        attribute = self.tag2attr(aname)
        print time.ctime()+'In read_dyn_attr(%s)'%aname
        if aname.endswith('_r'): 
            values = [(v[1] or 1e-12) for v in self.AttrData[attribute]]
            if values: print time.ctime()+'In read_dyn_attr(%s): %s[%d]:%s...%s'%(aname,type(values[0]),len(values),values[0],values[-1])
            else: print '\tno values'
            #print values
            attr.set_value(values,len(values))
        elif aname.endswith('_w'): 
            values = [(v[2] or 1e-12) for v in self.AttrData[attribute]]
            if values: print time.ctime()+'In read_dyn_attr(%s): %s[%d]:%s...%s'%(aname,type(values[0]),len(values),values[0],values[-1])
            else: print '\tno values'
            attr.set_value(values,len(values))
        elif aname.endswith('_t'): 
            values = [(v[0] or 1e-12) for v in self.AttrData[attribute]]
            if values: print time.ctime()+'In read_dyn_attr(%s): %s[%d]:%s...%s'%(aname,type(values[0]),len(values),values[0],values[-1])
            else: print '\tno values'
            #print values
            attr.set_value(values,len(values))
        print '\treturned %d values'%len(values)
        
    def is_dyn_attr_allowed(self,attr,req_type=None):
        return True #self.IsDataReady(attr.name)
    
    def reader_hook(self,attribute,values):
        """This method will be executed by the ReaderProcess to process the queried data.""" 
        try:
            print time.ctime()+'In reader_hook(%s,[%d])'%(attribute,len(values))
            #First create the attributes
            epoch,data,aname = [],[],attribute.replace('/','__')
            [(epoch.append(v[0]),data.append(v[1])) for v in values]
            AttrType = PyTango.AttrWriteType.READ
            #Adding time attribute
            #self.add_attribute(PyTango.Attr(aname+'_t',PyTango.DevDouble, AttrType),self.read_dyn_attr,None,self.is_dyn_attr_allowed)
            self.add_attribute(PyTango.SpectrumAttr(aname+'_t',PyTango.DevDouble, AttrType,1024*1024*1024),self.read_dyn_attr,None,self.is_dyn_attr_allowed)
            #dyntype = DynamicDSTypes['DevDouble']
            #is_spectrum = data and fun.isSequence(data[0])
            #for typename,dyntype in DynamicDSTypes.items(): pass
            #dyntype = DynamicDSTypes['DevVarDoubleArray']
            #if dyntype.dimx==1: pass
            #self.add_attribute(PyTango.SpectrumAttr(aname,dyntype.tangotype, AttrType,max_size or dyntype.dimx), \
            #    self.read_dyn_attr,self.write_dyn_attr,is_allowed)
            
            #self.add_attribute(PyTango.Attr(aname+'_r',PyTango.DevDouble, AttrType),self.read_dyn_attr,None,self.is_dyn_attr_allowed)
            self.add_attribute(PyTango.SpectrumAttr(aname+'_r',PyTango.DevDouble, AttrType,1024*1024*1024),self.read_dyn_attr,None,self.is_dyn_attr_allowed)
            
            #Then add the data to Cache values, so IsDataReady will return True
            self.AttrData[attribute] = values
        except:
            print traceback.format_exc()
    
#------------------------------------------------------------------
#    Device constructor
#------------------------------------------------------------------
    def __init__(self,cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.AttrData,self.reader = fandango.CaselessDict(),None #Created here to be init() proof
        PyExtractor.init_device(self)

#------------------------------------------------------------------
#    Device destructor
#------------------------------------------------------------------
    def delete_device(self):
        print time.ctime()+"[Device delete_device method] for device",self.get_name()
        self.reader.stop()
        #del self.reader
        print 'Waiting 10 seconds'
        time.sleep(10.)
        print 'Finished'

#------------------------------------------------------------------
#    Device initialization
#------------------------------------------------------------------
    def init_device(self):
        print time.ctime()+"In ", self.get_name(), "::init_device()"
        self.set_state(PyTango.DevState.ON)
        self.get_device_properties(self.get_device_class())
        if not self.reader: self.reader = PyTangoArchiving.reader.ReaderProcess(self.DbSchema)
        if self.AttrData: self.RemoveDynamicAttributes()

#------------------------------------------------------------------
#    Always excuted hook method
#------------------------------------------------------------------
    def always_executed_hook(self):
        print time.ctime()+"In ", self.get_name(), "::always_excuted_hook()"

#==================================================================
#
#    PyExtractor read/write attribute methods
#
#==================================================================
#------------------------------------------------------------------
#    Read Attribute Hardware
#------------------------------------------------------------------
    def read_attr_hardware(self,data):
        #print time.ctime()+"In ", self.get_name(), "::read_attr_hardware()"
        pass




#==================================================================
#
#    PyExtractor command methods
#
#==================================================================

#------------------------------------------------------------------
#    GetAttDataBetweenDates command:
#
#    Description: 
#    argin:  DevVarStringArray    
#    argout: DevVarLongStringArray    
#------------------------------------------------------------------
    def GetAttDataBetweenDates(self, argin):
        """
        Arguments to be AttrName, StartDate, StopDate
        """
        print time.ctime()+"In ", self.get_name(), "::GetAttDataBetweenDates(%s)"%argin
        #    Add your own code here
        size = 0
        aname = argin[0]
        tag = self.attr2tag(aname)
        dates = argin[1:3]
        RW = False
        attrs = [tag+'_r',tag+'_w',tag+'_t'] if RW else [tag+'_r',tag+'_t']
        if aname in self.AttrData: self.AttrData.pop(aname)
        self.reader.get_attribute_values(aname,(lambda v: self.reader_hook(aname,v)),dates[0],dates[1])
        argout = [range(len(attrs)),[a for a in attrs]]
        print '\t%s'%argout
        return argout


#------------------------------------------------------------------
#    RemoveDynamicAttribute command:
#
#    Description: 
#    argin:  DevString    
#------------------------------------------------------------------
    def RemoveDynamicAttribute(self, argin):
        print time.ctime()+"In ", self.get_name(), "::RemoveDynamicAttribute(%s)"%argin
        #    Add your own code here
        argin = self.tag2attr(argin)
        if argin in self.AttrData:
            data = self.AttrData.pop(argin)
            del data
        else:
            print '\tAttribute %s not in AttrData!!!!'%argin
        if False:
            #All this part disabled as it doesn't work well in PyTango 7.2.2
            try:
                attrlist = self.get_device_attr().get_attribute_list()
                attrlist = [a.get_name() for a in attrlist]
                print 'Attributelist: %s'%[str(a) for a in attrlist]
            except:
                print traceback.format_exc()
            aname = argin.replace('/','__').lower()
            for s in ('_r','_t'):#,'_w'):
                try: 
                    self.remove_attribute(aname+s)
                except Exception,e: 
                    print('\tremove_attribute(%s): %s'%(aname+s,e))
        return

#------------------------------------------------------------------
#    RemoveDynamicAttributes command:
#
#    Description: 
#------------------------------------------------------------------
    def RemoveDynamicAttributes(self):
        print "In ", self.get_name(), "::RemoveDynamicAttributes()"
        #    Add your own code here
        for a in self.AttrData.keys()[:]:
            self.RemoveDynamicAttribute(a)

#------------------------------------------------------------------
#    IsArchived command:
#
#    Description: 
#    argin:  DevString   
#    argout: DevBoolean 
#------------------------------------------------------------------
    def IsArchived(self, argin):
        print "In ", self.get_name(), "::IsArchived()"
        #    Add your own code here
        return self.reader.is_attribute_archived(argin)

#------------------------------------------------------------------
#    IsDataReady command:
#
#    Description: 
#    argin:  DevString   
#    argout: DevBoolean 
#------------------------------------------------------------------
    def IsDataReady(self, argin):
        print "In ", self.get_name(), "::IsDataReady(%s)"%argin
        #    Add your own code here
        aname = self.tag2attr(argin)
        argout = aname in self.AttrData
        print '\tIsDataReady(%s == %s): %s'%(argin,aname,argout)
        return argout

#------------------------------------------------------------------
#    GetCurrentArchivedAtt command:
#
#    Description: 
#    argout: DevVarStringArray    
#------------------------------------------------------------------
    def GetCurrentArchivedAtt(self):
        print "In ", self.get_name(), "::GetCurrentArchivedAtt()"
        #    Add your own code here
        return self.reader.available_attributes


#==================================================================
#
#    PyExtractorClass class definition
#
#==================================================================
class PyExtractorClass(PyTango.DeviceClass):

    #    Class Properties
    class_property_list = {
        'AliasFile':
            [PyTango.DevString,
            "",
            [] ],
        'DbConfig':
            [PyTango.DevString,
            "",
            [] ],
        'DbHost':
            [PyTango.DevString,
            "",
            [] ],
        }


    #    Device Properties
    device_property_list = {
        'DbSchema':
            [PyTango.DevString,
            "Database to use (hdb/tdb)",
            ["hdb"] ],    
        }


    #    Command definitions
    cmd_list = {
        'GetAttDataBetweenDates':
            [[PyTango.DevVarStringArray, ""],
            [PyTango.DevVarLongStringArray, ""]],
        'RemoveDynamicAttribute':
            [[PyTango.DevString, ""],
            [PyTango.DevVoid, ""]],
        'RemoveDynamicAttributes':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVoid, ""]],
        'IsArchived':
            [[PyTango.DevString, ""],
            [PyTango.DevBoolean, ""]],
        'IsDataReady':
            [[PyTango.DevString, "Requested attribute"],
            [PyTango.DevBoolean, ""]],
        'GetCurrentArchivedAtt':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVarStringArray, ""]],
        }


    #    Attribute definitions
    attr_list = {
        }


#------------------------------------------------------------------
#    PyExtractorClass Constructor
#------------------------------------------------------------------
    def __init__(self, name):
        PyTango.DeviceClass.__init__(self, name)
        self.set_type(name);
        print "In PyExtractorClass  constructor"

#==================================================================
#
#    PyExtractor class main method
#
#==================================================================
if __name__ == '__main__':
    try:
        py = PyTango.Util(sys.argv)
        py.add_TgClass(PyExtractorClass,PyExtractor,'PyExtractor')

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed,e:
        print '-------> Received a DevFailed exception:',e
    except Exception,e:
        print '-------> An unforeseen exception occured....',e
